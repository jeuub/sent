{"version":3,"sources":["panels/Home/Home.tsx","GraphQL/Mutations.js","panels/Login/Login.tsx","GraphQL/Queries.js","panels/Greeting/Greeting.tsx","components/Note/index.tsx","panels/Main/MainPanels/AllNotes/AllNotes.tsx","img/quot.svg","panels/Main/MainPanels/MyNote/MyNote.tsx","panels/Main/Main.jsx","App.js","index.js"],"names":["Home","id","go","fetchedUser","useEffect","localStorage","getItem","className","level","weight","style","marginBottom","first_name","last_name","before","photo_200","src","stretched","size","mode","onClick","clear","CREATE_USER","gql","SIGN_IN","HAS_ACCOUNT","NEW_NOTE","TOGGLE_FAVORITE","Login","useMutation","hasAccount","signIn","signUp","useState","error","setError","authorized","isAccountExisting","a","variables","vkid","data","String","login","username","setItem","registration","authorization","margin","FETCH_FEED","MY_NOTE","ME","Greeting","phrase","setPhrase","createNoteMutation","useQuery","loading","createNote","content","console","log","me","notes","length","type","placeholder","value","onChange","e","target","Note","author","date","favoriteCount","favoritedBy","toggleFavorite","favorite","setFavorite","favoriteCountState","setFavoriteCountState","forEach","toggle","toggleFavoriteId","getMonth","getFullYear","AllNotes","useLazyQuery","fetchPolicy","getFeed","openContext","setOpenContext","setMode","activePanel","right","aside","transform","opened","onClose","after","fill","noteFeed","map","Date","createdAt","MyNote","meLoading","meData","sentence","favoritedByAvatars","note","disabled","defaultValue","defaultChecked","options","label","header","quot","alt","width","float","marginLeft","marginRight","marginTop","minHeight","paddingTop","justifyContent","photos","undefined","textDecoration","href","Main","page","setPage","activeStory","tabbar","shadow","selected","text","errorLink","onError","graphqlErrors","networkErrors","message","location","path","networkError","authLink","ApolloLink","operation","forward","token","setContext","headers","link","from","HttpLink","uri","client","ApolloClient","cache","InMemoryCache","fetchOptions","App","setActivePanel","setUser","popout","setPopout","bridge","send","user","subscribe","detail","schemeAttribute","document","createAttribute","scheme","body","attributes","setNamedItem","fetchData","routerUnsubscribe","ApolloProvider","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.0b36b85e.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  Panel,\r\n  Button,\r\n  Group,\r\n  Cell,\r\n  Avatar,\r\n  Title,\r\n  Link,\r\n} from \"@vkontakte/vkui\";\r\nimport \"./home.css\";\r\n\r\ninterface Props {\r\n  id: any;\r\n  go: any;\r\n  fetchedUser: any;\r\n}\r\n\r\nconst Home = ({ id, go, fetchedUser }: Props) => {\r\n  useEffect(() => {\r\n    localStorage.getItem(\"sent-token\") ? go(\"greeting\") : null;\r\n  }, []);\r\n  return (\r\n    <Panel id={id} className=\"home-panel\">\r\n      {fetchedUser && (\r\n        <Group className=\"home-panel__greeting\">\r\n          <Title level=\"1\" weight=\"semibold\" style={{ marginBottom: 16 }}>\r\n            <strong>\r\n              {fetchedUser.first_name} {fetchedUser.last_name}\r\n            </strong>\r\n            ,<br />\r\n            приветствуем тебя в приложении <span>SENT</span>.\r\n          </Title>\r\n          <Cell\r\n            before={\r\n              fetchedUser.photo_200 ? (\r\n                <Avatar src={fetchedUser.photo_200} />\r\n              ) : null\r\n            }\r\n          />\r\n        </Group>\r\n      )}\r\n\r\n      <Group className=\"home-panel__actions\">\r\n        <Button stretched size=\"l\" mode=\"secondary\" onClick={() => go(\"login\")}>\r\n          Настроить sent.\r\n        </Button>\r\n        <Button\r\n          stretched\r\n          size=\"l\"\r\n          mode=\"secondary\"\r\n          onClick={() => localStorage.clear()}\r\n        >\r\n          Удалить данные\r\n        </Button>\r\n      </Group>\r\n    </Panel>\r\n  );\r\n};\r\n\r\nHome.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  go: PropTypes.func.isRequired,\r\n  fetchedUser: PropTypes.shape({\r\n    photo_200: PropTypes.string,\r\n    first_name: PropTypes.string,\r\n    last_name: PropTypes.string,\r\n    city: PropTypes.shape({\r\n      title: PropTypes.string,\r\n    }),\r\n  }),\r\n};\r\n\r\nexport default Home;\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const CREATE_USER = gql`\r\n  mutation signUp($username: String!, $vkid: String!) {\r\n    signUp(username: $username, vkid: $vkid)\r\n  }\r\n`;\r\n\r\nexport const SIGN_IN = gql`\r\n  mutation signIn($username: String!, $vkid: String!) {\r\n    signIn(username: $username, vkid: $vkid)\r\n  }\r\n`;\r\n\r\nexport const HAS_ACCOUNT = gql`\r\n  mutation hasAccount($vkid: String!) {\r\n    hasAccount(vkid: $vkid)\r\n  }\r\n`;\r\n\r\nexport const NEW_NOTE = gql`\r\n  mutation newNote($content: String!) {\r\n    newNote(content: $content) {\r\n      content\r\n      id\r\n      author {\r\n        username\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const TOGGLE_FAVORITE = gql`\r\n  mutation Mutation($toggleFavoriteId: ID!) {\r\n    toggleFavorite(id: $toggleFavoriteId) {\r\n      favoriteCount\r\n    }\r\n  }\r\n`;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Panel, Spinner, PanelSpinner } from \"@vkontakte/vkui\";\r\n\r\nimport \"./login.css\";\r\nimport { CREATE_USER, SIGN_IN, HAS_ACCOUNT } from \"../../GraphQL/Mutations\";\r\nimport { MY_NOTE } from \"../../GraphQL/Queries\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\n\r\ninterface Props {\r\n  id: any;\r\n  go: any;\r\n  fetchedUser: any;\r\n}\r\n\r\nconst Login = ({ id, go, fetchedUser }: any) => {\r\n  const [hasAccount] = useMutation(HAS_ACCOUNT);\r\n  const [signIn] = useMutation(SIGN_IN);\r\n  const [signUp] = useMutation(CREATE_USER);\r\n  const [error, setError] = useState(\"\");\r\n  let authorized = false;\r\n\r\n  const isAccountExisting = async () => {\r\n    try {\r\n      const data = await hasAccount({\r\n        variables: {\r\n          vkid: `${fetchedUser.id}`,\r\n        },\r\n      });\r\n      return data.data?.hasAccount;\r\n    } catch (e) {\r\n      setError(String(e) || \"\");\r\n    }\r\n  };\r\n\r\n  const login = async () => {\r\n    try {\r\n      const data = await signIn({\r\n        variables: {\r\n          username: `${fetchedUser.first_name} ${fetchedUser.last_name}`,\r\n          vkid: `${fetchedUser.id}`,\r\n        },\r\n      });\r\n      localStorage.setItem(\"sent-token\", data.data?.signIn);\r\n      authorized = true;\r\n      return data.data?.signIn;\r\n    } catch (e: any) {\r\n      setError(String(e) || \"\");\r\n    }\r\n  };\r\n\r\n  const registration = async () => {\r\n    try {\r\n      const data = await signUp({\r\n        variables: {\r\n          username: `${fetchedUser.first_name} ${fetchedUser.last_name}`,\r\n          vkid: `${fetchedUser.id}`,\r\n        },\r\n      });\r\n      localStorage.setItem(\"sent-token\", data.data?.signIn);\r\n      authorized = true;\r\n      return data.data?.signUp;\r\n    } catch (e: any) {\r\n      setError(String(e) || \"\");\r\n    }\r\n  };\r\n\r\n  const authorization = async () => {\r\n    const exists = await isAccountExisting();\r\n    exists ? login() : registration();\r\n  };\r\n  useEffect(() => {\r\n    if (fetchedUser) {\r\n      authorized = !!localStorage.getItem(\"sent-token\");\r\n      authorization();\r\n      if (authorized) {\r\n        go(\"greeting\");\r\n      }\r\n    }\r\n  }, [fetchedUser]);\r\n\r\n  return (\r\n    <Panel id={id} className=\"login__panel\">\r\n      <div className=\"login__spinner-wrapper\">\r\n        <Spinner size=\"large\" style={{ margin: \"20px 0\" }} />\r\n        {error ? error : null}\r\n      </div>\r\n    </Panel>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const FETCH_FEED = gql`\r\n  query Query {\r\n    noteFeed {\r\n      notes {\r\n        id\r\n        content\r\n        author {\r\n          username\r\n          id\r\n          vkid\r\n        }\r\n        createdAt\r\n        favoriteCount\r\n        favoritedBy {\r\n          vkid\r\n        }\r\n      }\r\n      cursor\r\n      hasNextPage\r\n    }\r\n  }\r\n`;\r\n\r\nexport const MY_NOTE = gql`\r\n  query myNote {\r\n    me {\r\n      notes {\r\n        content\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ME = gql`\r\n  query mySent {\r\n    me {\r\n      username\r\n      notes {\r\n        content\r\n        favoriteCount\r\n        favoritedBy {\r\n          username\r\n          vkid\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport { NEW_NOTE } from \"../../GraphQL/Mutations\";\r\nimport { MY_NOTE } from \"../../GraphQL/Queries\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\nimport { Panel, Button, FormItem, Input } from \"@vkontakte/vkui\";\r\nimport { Icon24Add } from \"@vkontakte/icons\";\r\n\r\ninterface Props {\r\n  id: any;\r\n  go: any;\r\n  fetchedUser: any;\r\n}\r\nimport \"./Greeting.css\";\r\n\r\nconst Greeting = ({ id, fetchedUser, go }: Props) => {\r\n  const [phrase, setPhrase] = useState(\"\");\r\n  const [createNoteMutation] = useMutation(NEW_NOTE);\r\n  const { loading, data } = useQuery(MY_NOTE);\r\n\r\n  const createNote = async () => {\r\n    try {\r\n      await createNoteMutation({\r\n        variables: {\r\n          content: phrase,\r\n        },\r\n      });\r\n\r\n      go(\"main\");\r\n    } catch {\r\n      console.log(\"err\");\r\n    }\r\n  };\r\n\r\n  if (data?.me?.notes.length) {\r\n    go(\"main\");\r\n  }\r\n  return (\r\n    <Panel id={id}>\r\n      {loading || data?.me?.notes.length ? null : (\r\n        <div className=\"main__container\">\r\n          <div>\r\n            <h3 className=\"main__logo\">SENT.</h3>\r\n            <h2>\r\n              Одна фраза - на все,\r\n              <br /> навсегда.\r\n            </h2>\r\n          </div>\r\n          <div className=\"main__form form\">\r\n            <div className=\"form__content \">\r\n              <FormItem>\r\n                <Input\r\n                  type=\"text\"\r\n                  placeholder=\"Your phrase\"\r\n                  value={phrase}\r\n                  onChange={(e) => setPhrase(e.target.value)}\r\n                />\r\n              </FormItem>\r\n              <Button\r\n                onClick={createNote}\r\n                before={<Icon24Add />}\r\n                size=\"m\"\r\n              ></Button>\r\n            </div>\r\n            <Button\r\n              mode=\"tertiary\"\r\n              size=\"m\"\r\n              className=\"form__later\"\r\n              stretched={true}\r\n              onClick={() => go(\"main\")}\r\n            >\r\n              {\" \"}\r\n              Создать фразу позже...\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </Panel>\r\n  );\r\n};\r\n\r\nexport default Greeting;\r\n","import { useState, useEffect } from \"react\";\r\nimport { Button, Counter } from \"@vkontakte/vkui\";\r\nimport { Icon24LikeOutline, Icon24Like } from \"@vkontakte/icons\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { TOGGLE_FAVORITE } from \"../../GraphQL/Mutations\";\r\nimport \"./style.css\";\r\ninterface autor {\r\n  username: String;\r\n  vkid: String;\r\n}\r\n\r\ninterface props {\r\n  fetchedUser: any;\r\n  favoritedBy: any;\r\n  author: autor;\r\n  content: string;\r\n  date: Date;\r\n  favoriteCount: number;\r\n  id: string;\r\n}\r\n\r\nconst Note = ({\r\n  fetchedUser,\r\n  author,\r\n  content,\r\n  date,\r\n  favoriteCount,\r\n  favoritedBy,\r\n  id,\r\n}: props) => {\r\n  const [toggleFavorite, { loading, error }] = useMutation(TOGGLE_FAVORITE);\r\n  const [favorite, setFavorite] = useState(false);\r\n  const [favoriteCountState, setFavoriteCountState] = useState(favoriteCount);\r\n  const monthNames = [\r\n    \"Январь\",\r\n    \"Февраль\",\r\n    \"Март\",\r\n    \"Апрель\",\r\n    \"Май\",\r\n    \"Июнь\",\r\n    \"Июль\",\r\n    \"Август\",\r\n    \"Сентябрь\",\r\n    \"Октябрь\",\r\n    \"Ноябрь\",\r\n    \"Декабрь\",\r\n  ];\r\n  useEffect(() => {\r\n    favoritedBy.forEach((e: any) => {\r\n      if (e.vkid == fetchedUser?.id) {\r\n        setFavorite(true);\r\n      }\r\n    });\r\n  }, []);\r\n  const toggle = async () => {\r\n    const data: any = await toggleFavorite({\r\n      variables: {\r\n        toggleFavoriteId: id,\r\n      },\r\n    });\r\n    setFavoriteCountState(data?.data?.toggleFavorite?.favoriteCount);\r\n    setFavorite(!favorite);\r\n  };\r\n  return (\r\n    <figure className=\"quote\">\r\n      <blockquote>\r\n        <p>{content}</p>\r\n      </blockquote>\r\n      <figcaption>\r\n        —{author.username}, {monthNames[date.getMonth()]} {date.getFullYear()}\r\n      </figcaption>\r\n      <Button\r\n        onClick={toggle}\r\n        mode={favorite ? \"primary\" : \"outline\"}\r\n        loading={!!loading}\r\n        before={<Counter mode=\"primary\">{favoriteCountState}</Counter>}\r\n      >\r\n        {favorite ? <Icon24Like /> : <Icon24LikeOutline />}\r\n      </Button>\r\n    </figure>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","import { useEffect, useState } from \"react\";\r\nimport {\r\n  Panel,\r\n  View,\r\n  List,\r\n  PanelHeaderButton,\r\n  PanelHeaderContent,\r\n  PanelHeaderContext,\r\n  PanelHeader,\r\n  Cell,\r\n} from \"@vkontakte/vkui\";\r\nimport { Icon28AddOutline, Icon24Done, Icon16Dropdown } from \"@vkontakte/icons\";\r\nimport { FETCH_FEED } from \"../../../../GraphQL/Queries\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport Note from \"../../../../components/Note\";\r\nimport \"./style.css\";\r\n\r\ninterface props {\r\n  id: string;\r\n  fetchedUser: any;\r\n}\r\n\r\nconst AllNotes = ({ id, fetchedUser }: props) => {\r\n  const [getFeed, { loading, error, data }] = useLazyQuery(FETCH_FEED, {\r\n    fetchPolicy: \"no-cache\",\r\n  });\r\n  useEffect(() => {\r\n    getFeed();\r\n  }, []);\r\n  const [openContext, setOpenContext] = useState(false);\r\n  const [mode, setMode] = useState(\"all\");\r\n  return (\r\n    <View id={id} activePanel={id}>\r\n      <Panel id={id}>\r\n        <PanelHeader\r\n          right={\r\n            <PanelHeaderButton>\r\n              <Icon28AddOutline />\r\n            </PanelHeaderButton>\r\n          }\r\n        >\r\n          <PanelHeaderContent\r\n            onClick={() => setOpenContext(!openContext)}\r\n            aside={\r\n              <Icon16Dropdown\r\n                style={{\r\n                  transform: `rotate(${openContext ? \"180deg\" : \"0\"})`,\r\n                }}\r\n              />\r\n            }\r\n          >\r\n            All sents.\r\n          </PanelHeaderContent>\r\n        </PanelHeader>\r\n        <PanelHeaderContext\r\n          opened={openContext}\r\n          onClose={() => setOpenContext(!openContext)}\r\n        >\r\n          <List>\r\n            <Cell\r\n              after={\r\n                mode === \"all\" ? <Icon24Done fill=\"var(--accent)\" /> : null\r\n              }\r\n              onClick={() => {\r\n                setMode(\"all\");\r\n                setOpenContext(false);\r\n              }}\r\n              data-mode=\"all\"\r\n            >\r\n              Показать все\r\n            </Cell>\r\n            <Cell\r\n              after={\r\n                mode === \"managed\" ? <Icon24Done fill=\"var(--accent)\" /> : null\r\n              }\r\n              onClick={() => {\r\n                setMode(\"managed\");\r\n                setOpenContext(false);\r\n              }}\r\n              data-mode=\"managed\"\r\n            >\r\n              Поиск\r\n            </Cell>\r\n          </List>\r\n        </PanelHeaderContext>\r\n        {loading\r\n          ? \"loading\"\r\n          : data?.noteFeed?.notes?.map((e: any) => (\r\n              <Note\r\n                favoritedBy={e.favoritedBy}\r\n                fetchedUser={fetchedUser}\r\n                author={e.author}\r\n                content={e.content}\r\n                date={new Date(e.createdAt)}\r\n                favoriteCount={e.favoriteCount}\r\n                id={e.id}\r\n                key={e.author.username}\r\n              />\r\n            ))}\r\n      </Panel>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default AllNotes;\r\n","export default __webpack_public_path__ + \"static/media/quot.12352560.svg\";","import React from \"react\";\r\nimport {\r\n  Panel,\r\n  Spinner,\r\n  PanelHeader,\r\n  View,\r\n  Group,\r\n  CardGrid,\r\n  Card,\r\n  SimpleCell,\r\n  Switch,\r\n  SplitLayout,\r\n  SplitCol,\r\n  InfoRow,\r\n  Header,\r\n  Div,\r\n  UsersStack,\r\n  FormItem,\r\n  Select,\r\n  Button,\r\n  CellButton,\r\n} from \"@vkontakte/vkui\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\nimport { ME } from \"../../../../GraphQL/Queries\";\r\nimport quot from \"../../../../img/quot.svg\";\r\n\r\ninterface props {\r\n  id: string;\r\n}\r\n\r\nconst MyNote = ({ id }: props) => {\r\n  const { loading: meLoading, data: meData } = useQuery(ME);\r\n  console.log(meLoading, meData);\r\n  const username = meData?.me.username;\r\n  let sentence = null;\r\n  let favoriteCount = null;\r\n  let favoritedBy = null;\r\n  let favoritedByAvatars = null;\r\n  if (meData?.me.notes.length) {\r\n    let note = meData?.me.notes[0];\r\n    sentence = note.content;\r\n    favoriteCount = note.favoriteCount;\r\n    favoritedBy = note.favoritedBy;\r\n    favoritedByAvatars = [\r\n      \"https://picsum.photos/300/300/\",\r\n      \"https://picsum.photos/seed/300/300/\",\r\n      \"https://picsum.photos/id/1/300/300/\",\r\n      \"https://picsum.photos/id/2/300/300/\",\r\n      \"https://picsum.photos/id/3/300/300/\",\r\n      \"https://picsum.photos/id/4/300/300/\",\r\n      \"https://picsum.photos/id/5/300/300/\",\r\n      \"https://picsum.photos/id/6/300/300/\",\r\n      \"https://picsum.photos/id/7/300/300/\",\r\n    ]; // temp array\r\n  }\r\n  const themes = [\r\n    { label: \"как в ВК\", value: \"auto\" },\r\n    { label: \"светлая\", value: \"light\" },\r\n    { label: \"тёмная\", value: \"dark\" },\r\n  ];\r\n\r\n  return (\r\n    <View id={id} activePanel={id}>\r\n      <Panel id={id}>\r\n        <PanelHeader>my sent.</PanelHeader>\r\n        <Group>\r\n          <Header mode=\"secondary\">Настройки</Header>\r\n          <SimpleCell\r\n            disabled\r\n            after={\r\n              <FormItem>\r\n                <Select\r\n                  // зафиксировать размер, убрать отступ справа\r\n                  defaultValue={\"auto\"}\r\n                  defaultChecked={true}\r\n                  options={themes}\r\n                />\r\n              </FormItem>\r\n            }\r\n          >\r\n            Тема\r\n          </SimpleCell>\r\n          <SimpleCell\r\n            disabled // временно\r\n            after={<Switch disabled aria-label=\"Уведомления о респектах\" />}\r\n          >\r\n            Уведомления о респектах\r\n          </SimpleCell>\r\n          <SimpleCell\r\n            disabled // временно\r\n            after={<Switch disabled aria-label=\"Уведомления об ответах\" />}\r\n          >\r\n            Уведомления об ответах\r\n          </SimpleCell>\r\n        </Group>\r\n        {!meLoading ? (\r\n          sentence != null ? (\r\n            <Group\r\n              mode=\"plain\"\r\n              header={<Header mode=\"secondary\">Фраза</Header>}\r\n            >\r\n              <CardGrid size=\"l\">\r\n                <Card mode=\"shadow\">\r\n                  <img\r\n                    src={quot}\r\n                    alt=\"Quotation mark\"\r\n                    style={{\r\n                      width: \"25px\",\r\n                      float: \"left\",\r\n                      marginLeft: \"10px\",\r\n                      marginRight: \"10px\",\r\n                      marginTop: \"5px\",\r\n                    }}\r\n                  />\r\n                  <blockquote style={{ minHeight: \"2rem\", paddingTop: \"5px\" }}>\r\n                    {sentence}\r\n                  </blockquote>\r\n                </Card>\r\n              </CardGrid>\r\n              <SplitLayout style={{ justifyContent: \"center\" }}>\r\n                <SplitCol>\r\n                  <Div>\r\n                    <InfoRow header=\"Просмотры фразы\">...</InfoRow>\r\n                  </Div>\r\n                </SplitCol>\r\n                <SplitCol>\r\n                  <Div>\r\n                    <InfoRow header=\"Просмотры профиля\">...</InfoRow>\r\n                  </Div>\r\n                </SplitCol>\r\n              </SplitLayout>\r\n              <SimpleCell before={\"Респекты: \" + favoriteCount}>\r\n                <UsersStack\r\n                  style={{ marginLeft: \"1em\" }}\r\n                  photos={favoritedByAvatars || undefined}\r\n                  size=\"m\"\r\n                />\r\n              </SimpleCell>\r\n              <SimpleCell>Ответы (временно не работают)</SimpleCell>\r\n            </Group>\r\n          ) : (\r\n            <Group\r\n              mode=\"plain\"\r\n              header={<Header mode=\"secondary\">Фраза</Header>}\r\n            >\r\n              <Button mode=\"outline\">Создать фразу</Button>\r\n            </Group>\r\n          )\r\n        ) : (\r\n          <Spinner />\r\n        )}\r\n        <Group>\r\n          <a\r\n            style={{ textDecoration: \"none\" }}\r\n            href=\"http://pd-2021-2.std-1368.ist.mospolytech.ru/\"\r\n            target=\"_blank\"\r\n          >\r\n            <CellButton>О sent.</CellButton>\r\n          </a>\r\n          <CellButton mode=\"danger\">Удалить аккаунт (dev)</CellButton>\r\n        </Group>\r\n      </Panel>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default MyNote;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Panel,\r\n  Spinner,\r\n  Tabbar,\r\n  TabbarItem,\r\n  Epic,\r\n  PanelHeader,\r\n  View,\r\n  Group,\r\n  FixedLayout,\r\n} from \"@vkontakte/vkui\";\r\nimport {\r\n  Icon28NewsfeedOutline,\r\n  Icon28UserCircleOutline,\r\n  Icon28MessageOutline,\r\n} from \"@vkontakte/icons\";\r\nimport AllNotes from \"./MainPanels/AllNotes/AllNotes\";\r\nimport MyNote from \"./MainPanels/MyNote/MyNote\";\r\nimport \"./Main.css\";\r\n\r\nconst Main = ({ fetchedUser }) => {\r\n  const [page, setPage] = useState(\"all\");\r\n  return (\r\n    <Panel>\r\n      {/* <FixedLayout> */}\r\n      <Epic\r\n        activeStory={page}\r\n        tabbar={\r\n          <Tabbar shadow={false}>\r\n            <TabbarItem\r\n              selected={page === \"all\"}\r\n              onClick={() => setPage(\"all\")}\r\n              text=\"Новости\"\r\n            >\r\n              <Icon28NewsfeedOutline />\r\n            </TabbarItem>\r\n            <TabbarItem\r\n              selected={page === \"my\"}\r\n              onClick={() => setPage(\"my\")}\r\n              text=\"Профиль\"\r\n            >\r\n              <Icon28UserCircleOutline />\r\n            </TabbarItem>\r\n          </Tabbar>\r\n        }\r\n      >\r\n        <AllNotes id=\"all\" fetchedUser={fetchedUser} />\r\n        <MyNote id=\"my\" />\r\n      </Epic>\r\n    </Panel>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport bridge from \"@vkontakte/vk-bridge\";\r\nimport {\r\n  View,\r\n  ScreenSpinner,\r\n  ConfigProvider,\r\n  AdaptivityProvider,\r\n  AppRoot,\r\n} from \"@vkontakte/vkui\";\r\nimport \"@vkontakte/vkui/dist/vkui.css\";\r\nimport {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  ApolloProvider,\r\n  HttpLink,\r\n  ApolloLink,\r\n  from,\r\n} from \"@apollo/client\";\r\nimport { onError } from \"@apollo/client/link/error\";\r\n\r\nimport Home from \"./panels/Home/Home\";\r\nimport Login from \"./panels/Login/Login\";\r\nimport Greeting from \"./panels/Greeting/Greeting\";\r\nimport Main from \"./panels/Main/Main\";\r\n\r\nconst errorLink = onError(({ graphqlErrors, networkErrors }) => {\r\n  if (graphqlErrors) {\r\n    graphqlErrors.map(({ message, location, path }) => {\r\n      console.log(`GraphQL error: ${message}`);\r\n    });\r\n  }\r\n  if (networkError) console.log(`[Network error]: ${networkError}`);\r\n});\r\n\r\nconst authLink = new ApolloLink((operation, forward) => {\r\n  const token = localStorage.getItem(\"sent-token\");\r\n  operation.setContext(({ headers = {} }) => ({\r\n    headers: {\r\n      ...headers,\r\n      authorization: token || null,\r\n    },\r\n  }));\r\n  return forward(operation);\r\n});\r\n\r\nconst link = from([\r\n  authLink,\r\n  errorLink,\r\n  new HttpLink({ uri: \"https://sent-server.herokuapp.com/api\" }),\r\n]);\r\n\r\n// const abortControler = new AbortController();\r\n\r\nconst client = new ApolloClient({\r\n  cache: new InMemoryCache(),\r\n  link: link,\r\n  fetchOptions: {\r\n    mode: \"no-cors\",\r\n    // signal: abortControler.signal,\r\n  },\r\n});\r\n\r\nconst App = () => {\r\n  const [activePanel, setActivePanel] = useState(\"login\");\r\n  const [fetchedUser, setUser] = useState(null);\r\n  const [popout, setPopout] = useState(<ScreenSpinner size=\"large\" />);\r\n\r\n  useEffect(() => {\r\n    bridge.subscribe(({ detail: { type, data } }) => {\r\n      if (type === \"VKWebAppUpdateConfig\") {\r\n        const schemeAttribute = document.createAttribute(\"scheme\");\r\n        schemeAttribute.value = data.scheme ? data.scheme : \"client_light\";\r\n        document.body.attributes.setNamedItem(schemeAttribute);\r\n      }\r\n    });\r\n    async function fetchData() {\r\n      const user = await bridge.send(\"VKWebAppGetUserInfo\");\r\n      setUser(user);\r\n      setPopout(null);\r\n    }\r\n    fetchData();\r\n\r\n    return () => {\r\n      routerUnsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  const go = (target) => {\r\n    setActivePanel(target);\r\n  };\r\n\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <AdaptivityProvider>\r\n        <AppRoot>\r\n          <View activePanel={activePanel} popout={popout}>\r\n            <Home id=\"home\" fetchedUser={fetchedUser} go={go} />\r\n            <Login id=\"login\" fetchedUser={fetchedUser} go={go} />\r\n            <Greeting id=\"greeting\" fetchedUser={fetchedUser} go={go} />\r\n            <Main id=\"main\" fetchedUser={fetchedUser} go={go} />\r\n          </View>\r\n        </AppRoot>\r\n      </AdaptivityProvider>\r\n    </ApolloProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport bridge from \"@vkontakte/vk-bridge\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\n// Init VK  Mini App\r\nbridge.send(\"VKWebAppInit\");\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\nif (process.env.NODE_ENV === \"development\") {\r\n  /* eslint-disable */\r\n  import(\"./eruda\").then(({ default: eruda }) => {}); //runtime download\r\n}\r\n"],"sourceRoot":""}